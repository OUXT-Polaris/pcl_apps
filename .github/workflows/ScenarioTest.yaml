name: Scenario Test

on:
  schedule:
    - cron: 0 0 * * *
  push:
  workflow_dispatch:

jobs:
  scenario_test:
    name: Build
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2-beta
    - run: gh run download -n packages
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GH_REPO: OUXT-Polaris/robotx_setup
    - uses: OUXT-Polaris/update-repos-action@0.0.1
      with:
        input_repos_file: packages.repos
        output_repos_file: packages.repos
        package_name: hermite_path_planner
        target_version: ${{ github.sha }}
    - name: check repos file
      run: cat packages.repos
    - uses: actions/upload-artifact@v2
      with:
        name: packages
        path: packages.repos
    - name: Run ros integration test action from base image
      if: ${{ github.event.label.name != 'clean_build' }}
      uses: OUXT-Polaris/ros-integration-test-action@0.0.9
      with:
        base_image: hakuturu583/robotx_scenario_test
        tag: master
        rosdistro: foxy
        test_command: ros2 launch navi_sim with_planner.launch.py
        check_result_command: ros2 run navi_sim check_result
        artifact_name: scenario_test_result
        repos_artifact_name: packages
        repos_filename: packages.repos
        lcov_artifacts_name: lcov
      env:
        ACTIONS_RUNTIME_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        ACTIONS_RUNTIME_URL: ${{ env.ACTIONS_RUNTIME_URL }}
        GITHUB_RUN_ID: ${env.GITHUB_RUN_ID}
        GITHUB_CLONE_TOKEN: ${{ secrets.WAMV_TAN_BOT_SECRET }} # access token for cloning your package in private repository.
        GITHUB_CLONE_USERNAME: wam-v-tan # username of access token
    - name: Run ros integration test action from clean image
      if: ${{ github.event.label.name == 'clean_build' }}
      uses: OUXT-Polaris/ros-integration-test-action@0.0.9
      with:
        base_image: ros/foxy
        tag: master
        rosdistro: foxy
        test_command: ros2 launch navi_sim with_planner.launch.py
        check_result_command: ros2 run navi_sim check_result
        artifact_name: scenario_test_result
        repos_artifact_name: packages
        repos_filename: packages.repos
        lcov_artifacts_name: lcov
      env:
        ACTIONS_RUNTIME_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        ACTIONS_RUNTIME_URL: ${{ env.ACTIONS_RUNTIME_URL }}
        GITHUB_RUN_ID: ${env.GITHUB_RUN_ID}
        GITHUB_CLONE_TOKEN: ${{ secrets.WAMV_TAN_BOT_SECRET }} # access token for cloning your package in private repository.
        GITHUB_CLONE_USERNAME: wam-v-tan # username of access token